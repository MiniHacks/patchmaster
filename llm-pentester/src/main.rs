use axum::{routing::post, Router};

use std::net::SocketAddr;
use tower_http::cors::{self, Any};

use crate::webservice::kick_off_pipeline;

mod llm;
mod webservice;

#[tokio::main]
async fn main() {
    use std::str::FromStr;
    let port = std::env::var("PORT")
        .ok()
        .and_then(|x| u16::from_str(&x).ok())
        .unwrap_or(8080);
    println!("Listening on port {port}");

    let cors = cors::CorsLayer::new()
        // allow `GET` and `POST` when accessing the resource
        .allow_methods([http::Method::GET, http::Method::POST, http::Method::OPTIONS])
        .allow_headers([http::header::CONTENT_TYPE])
        // allow requests from any origin
        .allow_origin(Any);

    let serve_layer = tower_http::services::ServeDir::new("./static");

    // build our application with a route
    let app = Router::new()
        .route("/start_auditing", post(kick_off_pipeline))
        .nest_service("/", serve_layer)
        .layer(cors);

    let addr = SocketAddr::from(([0, 0, 0, 0], port));
    axum::Server::bind(&addr)
        .serve(app.into_make_service())
        .await
        .unwrap();
}
